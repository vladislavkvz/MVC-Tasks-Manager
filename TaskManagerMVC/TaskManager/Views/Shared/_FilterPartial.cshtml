@model System.Object

@{
    string controller = this.ViewContext.RouteData.Values["controller"].ToString();
    string action = this.ViewContext.RouteData.Values["action"].ToString();
    string namePrefix = Model.GetType().GetProperty("Prefix").GetValue(Model, null).ToString();
    string idPrefix = namePrefix.Replace(".", "_");
    var parentPager = (TaskManager.VIewModels.Pager)Model.GetType().GetProperty("ParentPager").GetValue(Model, null);
    var editableProperties = new Dictionary<System.Reflection.PropertyInfo, string>();
    foreach (System.Reflection.PropertyInfo pi in Model.GetType().GetProperties())
    {
        object obj = pi.GetCustomAttributes(false).FirstOrDefault(a => a is TaskManager.Tools.FilterPropertyAttribute);
        if (obj != null)
        {
            TaskManager.Tools.FilterPropertyAttribute attrib = (TaskManager.Tools.FilterPropertyAttribute)obj;
            editableProperties.Add(pi, attrib.DisplayName);
        }
    }

    var props = Model.GetType().GetProperties();
    string id = "";
    foreach (var prop in props)
    {
        if (prop.Name == "TaskId")
        {
            id = prop.GetValue(Model).ToString();
        }
    }
}

<form action="/@controller/@action/@id" method="get">
    @foreach (string key in this.Request.QueryString.Keys)
    {
        if (!key.StartsWith(namePrefix) && key != parentPager.Prefix + "CurrentPage")
        {
            @Html.Hidden(key, this.Request.QueryString[key]);
        }
    }

    @foreach (var kvp in this.ViewContext.RouteData.Values)
    {
        if (kvp.Key != "controller" && kvp.Key != "action" && kvp.Key != parentPager.Prefix + "CurrentPage" && !kvp.Key.StartsWith(namePrefix))
        {
            @Html.Hidden(kvp.Key, kvp.Value);
        }
    }

    <p>
        @foreach (var kvp in editableProperties)
        {
            @Html.Label(idPrefix + kvp.Key.Name, kvp.Value)
            @Html.TextBox(namePrefix + kvp.Key.Name, kvp.Key.GetValue(Model, null))
        }
        <input type="submit" value="Search" />
    </p>
</form>
